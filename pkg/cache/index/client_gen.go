/*
 * Copyright 2018 The Trickster Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

package index

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *IndexedClient) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "cache_size":
			z.CacheSize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CacheSize")
				return
			}
		case "object_count":
			z.ObjectCount, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ObjectCount")
				return
			}
		case "objects":
			err = z.Objects.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
		case "LastFlush":
			err = dc.ReadExtension(&z.LastFlush)
			if err != nil {
				err = msgp.WrapError(err, "LastFlush")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *IndexedClient) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "cache_size"
	err = en.Append(0x84, 0xaa, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CacheSize)
	if err != nil {
		err = msgp.WrapError(err, "CacheSize")
		return
	}
	// write "object_count"
	err = en.Append(0xac, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ObjectCount)
	if err != nil {
		err = msgp.WrapError(err, "ObjectCount")
		return
	}
	// write "objects"
	err = en.Append(0xa7, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73)
	if err != nil {
		return
	}
	err = z.Objects.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	// write "LastFlush"
	err = en.Append(0xa9, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.LastFlush)
	if err != nil {
		err = msgp.WrapError(err, "LastFlush")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *IndexedClient) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "cache_size"
	o = append(o, 0x84, 0xaa, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.CacheSize)
	// string "object_count"
	o = append(o, 0xac, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.ObjectCount)
	// string "objects"
	o = append(o, 0xa7, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73)
	o, err = z.Objects.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	// string "LastFlush"
	o = append(o, 0xa9, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.LastFlush)
	if err != nil {
		err = msgp.WrapError(err, "LastFlush")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexedClient) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "cache_size":
			z.CacheSize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheSize")
				return
			}
		case "object_count":
			z.ObjectCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ObjectCount")
				return
			}
		case "objects":
			bts, err = z.Objects.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
		case "LastFlush":
			bts, err = msgp.ReadExtensionBytes(bts, &z.LastFlush)
			if err != nil {
				err = msgp.WrapError(err, "LastFlush")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *IndexedClient) Msgsize() (s int) {
	s = 1 + 11 + msgp.Int64Size + 13 + msgp.Int64Size + 8 + z.Objects.Msgsize() + 10 + msgp.ExtensionPrefixSize + z.LastFlush.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *IndexedClientOptions) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NeedsFlushInterval":
			z.NeedsFlushInterval, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "NeedsFlushInterval")
				return
			}
		case "NeedsReapInterval":
			z.NeedsReapInterval, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "NeedsReapInterval")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z IndexedClientOptions) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "NeedsFlushInterval"
	err = en.Append(0x82, 0xb2, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.NeedsFlushInterval)
	if err != nil {
		err = msgp.WrapError(err, "NeedsFlushInterval")
		return
	}
	// write "NeedsReapInterval"
	err = en.Append(0xb1, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.NeedsReapInterval)
	if err != nil {
		err = msgp.WrapError(err, "NeedsReapInterval")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z IndexedClientOptions) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "NeedsFlushInterval"
	o = append(o, 0x82, 0xb2, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c)
	o = msgp.AppendBool(o, z.NeedsFlushInterval)
	// string "NeedsReapInterval"
	o = append(o, 0xb1, 0x4e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c)
	o = msgp.AppendBool(o, z.NeedsReapInterval)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *IndexedClientOptions) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NeedsFlushInterval":
			z.NeedsFlushInterval, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NeedsFlushInterval")
				return
			}
		case "NeedsReapInterval":
			z.NeedsReapInterval, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NeedsReapInterval")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z IndexedClientOptions) Msgsize() (s int) {
	s = 1 + 19 + msgp.BoolSize + 18 + msgp.BoolSize
	return
}

/*
 * Copyright 2018 The Trickster Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

package index

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Object) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "expiration":
			err = dc.ReadExtension(&z.Expiration)
			if err != nil {
				err = msgp.WrapError(err, "Expiration")
				return
			}
		case "lastwrite":
			err = dc.ReadExtension(&z.LastWrite)
			if err != nil {
				err = msgp.WrapError(err, "LastWrite")
				return
			}
		case "lastaccess":
			err = dc.ReadExtension(&z.LastAccess)
			if err != nil {
				err = msgp.WrapError(err, "LastAccess")
				return
			}
		case "size":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Object) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	_ = zb0001Mask
	if z.Value == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// write "key"
		err = en.Append(0xa3, 0x6b, 0x65, 0x79)
		if err != nil {
			return
		}
		err = en.WriteString(z.Key)
		if err != nil {
			err = msgp.WrapError(err, "Key")
			return
		}
		// write "expiration"
		err = en.Append(0xaa, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteExtension(&z.Expiration)
		if err != nil {
			err = msgp.WrapError(err, "Expiration")
			return
		}
		// write "lastwrite"
		err = en.Append(0xa9, 0x6c, 0x61, 0x73, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65)
		if err != nil {
			return
		}
		err = en.WriteExtension(&z.LastWrite)
		if err != nil {
			err = msgp.WrapError(err, "LastWrite")
			return
		}
		// write "lastaccess"
		err = en.Append(0xaa, 0x6c, 0x61, 0x73, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73)
		if err != nil {
			return
		}
		err = en.WriteExtension(&z.LastAccess)
		if err != nil {
			err = msgp.WrapError(err, "LastAccess")
			return
		}
		// write "size"
		err = en.Append(0xa4, 0x73, 0x69, 0x7a, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Size)
		if err != nil {
			err = msgp.WrapError(err, "Size")
			return
		}
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// write "value"
			err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Object) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	_ = zb0001Mask
	if z.Value == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))

	// skip if no fields are to be emitted
	if zb0001Len != 0 {
		// string "key"
		o = append(o, 0xa3, 0x6b, 0x65, 0x79)
		o = msgp.AppendString(o, z.Key)
		// string "expiration"
		o = append(o, 0xaa, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
		o, err = msgp.AppendExtension(o, &z.Expiration)
		if err != nil {
			err = msgp.WrapError(err, "Expiration")
			return
		}
		// string "lastwrite"
		o = append(o, 0xa9, 0x6c, 0x61, 0x73, 0x74, 0x77, 0x72, 0x69, 0x74, 0x65)
		o, err = msgp.AppendExtension(o, &z.LastWrite)
		if err != nil {
			err = msgp.WrapError(err, "LastWrite")
			return
		}
		// string "lastaccess"
		o = append(o, 0xaa, 0x6c, 0x61, 0x73, 0x74, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73)
		o, err = msgp.AppendExtension(o, &z.LastAccess)
		if err != nil {
			err = msgp.WrapError(err, "LastAccess")
			return
		}
		// string "size"
		o = append(o, 0xa4, 0x73, 0x69, 0x7a, 0x65)
		o = msgp.AppendInt64(o, z.Size)
		if (zb0001Mask & 0x20) == 0 { // if not omitted
			// string "value"
			o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
			o = msgp.AppendBytes(o, z.Value)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Object) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "expiration":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Expiration)
			if err != nil {
				err = msgp.WrapError(err, "Expiration")
				return
			}
		case "lastwrite":
			bts, err = msgp.ReadExtensionBytes(bts, &z.LastWrite)
			if err != nil {
				err = msgp.WrapError(err, "LastWrite")
				return
			}
		case "lastaccess":
			bts, err = msgp.ReadExtensionBytes(bts, &z.LastAccess)
			if err != nil {
				err = msgp.WrapError(err, "LastAccess")
				return
			}
		case "size":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Object) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Key) + 11 + msgp.ExtensionPrefixSize + z.Expiration.Len() + 10 + msgp.ExtensionPrefixSize + z.LastWrite.Len() + 11 + msgp.ExtensionPrefixSize + z.LastAccess.Len() + 5 + msgp.Int64Size + 6 + msgp.BytesPrefixSize + len(z.Value)
	return
}
